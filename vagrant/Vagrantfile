# -*- mode: ruby -*-
# vi:set ft=ruby sw=2 ts=2 sts=2:

# Define the number of master and worker nodes
# If this number is changed, remember to update setup-hosts.sh script with the new hosts IP details in /etc/hosts of each VM.
VAGRANTFILE_API_VERSION = "2"

NUM_MASTER_NODE = 2
NUM_WORKER_NODE = 2

IP_NW = "192.168.5."
MASTER_IP_START = 10
NODE_IP_START = 20
LB_IP_START = 30

# Define vars for ansible
ansible_hosts = {}
all_vars = []
master_hosts = []
master_ips = []
worker_hosts = []
worker_ips = []

(1..NUM_MASTER_NODE).each do |j|
  master_hosts << "master-#{j}"
  master_ips << IP_NW + "#{MASTER_IP_START + j}"
  ansible_hosts["master-#{j}"] =  { "ansible_host" => IP_NW + "#{MASTER_IP_START + j}" }
  all_vars << { "host" => "master-#{j}", "ip" => IP_NW + "#{MASTER_IP_START + j}" }
end

(1..NUM_MASTER_NODE).each do |k|
  worker_hosts << "worker-#{k}"
  worker_ips << IP_NW + "#{NODE_IP_START + k}"
  ansible_hosts["worker-#{k}"] =  { "ansible_host" => IP_NW + "#{NODE_IP_START + k}" }
  all_vars << { "host" => "worker-#{k}", "ip" => IP_NW + "#{NODE_IP_START + k}" }
end

all_vars << { "host" => "loadbalancer", "ip" => IP_NW + "#{LB_IP_START}" }

hash_vars = {
    "all_vars" => all_vars,
}

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "ubuntu/bionic64"
  config.vbguest.auto_update = false
  config.vm.box_check_update = false

  # Provision Master Nodes
  (1..NUM_MASTER_NODE).each do |i|
      config.vm.define "master-#{i}" do |node|
        # Name shown in the GUI
        node.vm.provider "virtualbox" do |vb|
            vb.name = "kubernetes-ha-master-#{i}"
            vb.memory = 2048
            vb.cpus = 2
        end
        node.vm.hostname = "master-#{i}"
        node.vm.network :private_network, ip: IP_NW + "#{MASTER_IP_START + i}"
        node.vm.network "forwarded_port", guest: 22, host: "#{2710 + i}"
		node.vm.provision "shell",
          inline: "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
        node.vm.provision "shell",
          inline: "service sshd restart"
        node.vm.provision "file", source: "./ubuntu/cert_verify.sh", destination: "$HOME/"
      end
  end

  # Provision Worker Nodes
  (1..NUM_WORKER_NODE).each do |i|
    config.vm.define "worker-#{i}" do |node|
        node.vm.provider "virtualbox" do |vb|
            vb.name = "kubernetes-ha-worker-#{i}"
            vb.memory = 512
            vb.cpus = 1
        end
        node.vm.hostname = "worker-#{i}"
        node.vm.network :private_network, ip: IP_NW + "#{NODE_IP_START + i}"
		node.vm.network "forwarded_port", guest: 22, host: "#{2720 + i}"
		node.vm.provision "shell",
          inline: "sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config"
        node.vm.provision "shell",
          inline: "service sshd restart"
        node.vm.provision "file", source: "./ubuntu/cert_verify.sh", destination: "$HOME/"
    end
  end

  # Provision Load Balancer Node
  config.vm.define "loadbalancer" do |node|
    node.vm.provider "virtualbox" do |vb|
        vb.name = "kubernetes-ha-lb"
        vb.memory = 512
        vb.cpus = 1
    end
    node.vm.hostname = "loadbalancer"
    node.vm.network :private_network, ip: IP_NW + "#{LB_IP_START}"
	node.vm.network "forwarded_port", guest: 22, host: 2730
    node.vm.provision :ansible_local do |ansible|
        ansible.playbook       = "provisioning/playbook.yaml"
        ansible.verbose        = "v"
        ansible.extra_vars = hash_vars
        ansible.groups = {
          "master" => master_hosts,
          "worker" => worker_hosts,
          "all:vars" => {
            "ansible_user" => "vagrant",
            "ansible_password" => "vagrant",
            "ansible_ssh_common_args" => "-o StrictHostKeyChecking=no"
           }
        }
        ansible.host_vars = ansible_hosts
        ansible.limit = "all"
#         ansible.raw_arguments = ['--check']
    end
  end
end
